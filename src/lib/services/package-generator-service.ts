import JSZip from 'jszip';
import { ClientPreview, PackageData, ProcessingMetadata } from '@/types';
import APP_CONFIG from '@/config/app-config';

/**
 * Service for generating downloadable ZIP packages
 */
export class PackageGeneratorService {
  /**
   * Generate a ZIP package containing HTML snippet, fallback images, and instructions
   * @param packageData Data for the package
   * @returns Buffer containing the ZIP file
   */
  static async generatePackage(packageData: PackageData): Promise<Buffer> {
    const { htmlSnippet, pngFile, instructions, previews, metadata } = packageData;
    
    // Create a new ZIP file
    const zip = new JSZip();
    
    // Add HTML snippet file
    zip.file('email-logo-snippet.html', htmlSnippet);
    
    // Add PNG fallback file
    zip.file('email-logo-fallback.png', pngFile);
    
    // Add markdown instructions
    zip.file('README.md', this.generateInstructions(instructions, metadata));
    
    // Create previews folder
    const previewsFolder = zip.folder('previews');
    
    // Add preview images
    if (previewsFolder) {
      for (const preview of previews) {
        if (preview.previewImage) {
          previewsFolder.file(
            `${preview.client}-preview.png`, 
            preview.previewImage
          );
        }
      }
    }
    
    // Generate ZIP file
    return await zip.generateAsync({
      type: 'nodebuffer',
      compression: 'DEFLATE',
      compressionOptions: {
        level: APP_CONFIG.output.zip.compression
      }
    });
  }
  
  /**
   * Generate markdown instructions for the package
   * @param baseInstructions Base instructions text
   * @param metadata Processing metadata
   * @returns Formatted markdown instructions
   */
  private static generateInstructions(baseInstructions: string, metadata: ProcessingMetadata): string {
    const { originalFileSize, optimizedFileSize, compressionRatio, processingTime, generatedAt } = metadata;
    
    // Format file sizes for display
    const formatFileSize = (sizeInBytes: number): string => {
      if (sizeInBytes < 1024) {
        return `${sizeInBytes} bytes`;
      } else if (sizeInBytes < 1024 * 1024) {
        return `${(sizeInBytes / 1024).toFixed(2)} KB`;
      } else {
        return `${(sizeInBytes / (1024 * 1024)).toFixed(2)} MB`;
      }
    };
    
    // Create instructions with metadata
    return `# Email Logo Integration Instructions

${baseInstructions}

## Package Contents

- \`email-logo-snippet.html\`: HTML code block with all fallbacks
- \`email-logo-fallback.png\`: PNG fallback image
- \`previews/\`: Folder containing preview images for different email clients

## Processing Information

- **Original File Size:** ${formatFileSize(originalFileSize)}
- **Optimized File Size:** ${formatFileSize(optimizedFileSize)}
- **Compression Ratio:** ${compressionRatio.toFixed(2)}x
- **Processing Time:** ${processingTime.toFixed(2)}ms
- **Generated At:** ${generatedAt}

## Email Client Compatibility

This package includes fallbacks for all major email clients:

- **Modern Clients (Apple Mail, Thunderbird):** SVG vector format
- **Web Clients (Gmail, Yahoo):** PNG raster format
- **Outlook Desktop:** VML vector format

## Integration Steps

1. Copy the HTML code from \`email-logo-snippet.html\`
2. Paste it directly into your email template
3. No external hosting is required as all assets are embedded as data URIs
4. Test your email in different clients using the preview images as a reference

## Need Help?

If you encounter any issues with the generated code, please check the preview images
to see how your logo will appear in different email clients.

---

Generated by CompatimageGen on ${generatedAt}
`;
  }
  
  /**
   * Generate default instructions for email integration
   * @returns Default instructions text
   */
  static generateDefaultInstructions(): string {
    return `This package contains everything you need to integrate your logo into email templates with maximum compatibility across email clients.

## How to Use

1. Copy the HTML code from the \`email-logo-snippet.html\` file
2. Paste it directly into your email template HTML
3. The code includes fallbacks for all major email clients:
   - SVG for modern clients
   - PNG for clients that don't support SVG
   - VML for Outlook Desktop

No external hosting is required as all assets are embedded as data URIs.`;
  }
}

export default PackageGeneratorService;